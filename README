Below are listed the components of submitting bulk jobs for the SAM SCE model.

====================================================
====================================================
===		LHS.out			============
====================================================
====================================================
Compile with: g++ LHS_CSV_generator.cpp -o LHS.out
Run with: ./LHS.out

The intention of this file is to automatically generate
CSV files with simulation parameters for a Latin Hypercube
Sampling of a parameter space upon which variance based 
sensitivity analysis can be performed, including rows with
X,Y,and X_j. 


In: Prompted input for batch info, sequence names, number of samples,
parameter data types and min/max values. 

Out:  A CSV file with LHS sampled parameter values formatted 
consistently with CSV_interpreter.

Batch info: Each comma separated term will be pasted at the beginning of each
batchGenerator script. These should be the simulation parameters
that are not varied, separated by spaces. (Note that main.cpp
parameters must be prefaced by -par).

Example: >-p,batch,-test,TEST,-cores,12,-par,-div,2,-par,-WR,1.3

Parameter flags: The simulation main.cpp flags that correspond to parameters
that will be varied in the GSA.  

Example: >-CKR,-TC


Example usage:
bash-4.2$ ./LHS.out
Please enter output CSV file name (no file extension):
>TEST
Enter batch info: Comma separated, no trailing comma, no spaces:
>-p,batch,-hours,24,-cores,12,-test,TEST_NAME,-par,-WR,0.7,-par,-CK,1
Enter parameter flags: Comma separated, no trailing commas, no spaces:
>-div,-TC
Number of parameters being varied?
>2

Enter data types of the parameters:
1: double
2: int
3: boolean
Parameter 1: 2
Parameter 2: 2
Enter parameter 1 min:1
Enter parameter 1 max:3
Enter parameter 2 min:1
Enter parameter 2 max:4
Parameter 1 info:
Minval: 1
Maxval: 3
Type: 2
Parameter 2 info:
Minval: 1
Maxval: 4
Type: 2
Enter number of samples:
200

====================================================
====================================================
===		CSV_interpreter.(cpp/out)===========
====================================================
====================================================
Compile with:  g++ CSV_interpreter.cpp -o CSV_interpreter.out
run with: ./CSV_interpreter.out foo.csv
This file takes a CSV foo with simulation constants detailed on
line 1, variable parameters on line 2, and the values that 
those variables take on line 3 and beyond.  Each row of the 
CSV will correspond to one submitted simulation. 

NOTE:  YOU MUST COMPILE THE BATCH MAKER FIRST OR THIS WILL NOT RUN

IN: K = index of first test name.
CSV formatted as
>Batch info
>Parameter flags (-P1, ... ,-PM) (M flags taken from main.cpp)
>x_11,x_12,...,x_1M
>x_21,x_22,...,x_2M
...
>x_N1,x_N2,...,x_NM (where N is the number of simulations to be submitted.

OUT: N simulations submitted with (batch info) constant parameters, 
and Parameter flags' being set by each row. -test NAME will
result in simulations being submitted as NAME_1, NAME_2,..., NAME_N
by generating AUTO_BATCH.sh and submitting for each set of values.

The Batch info is defined by batchmaker.cpp / batchGenerator.out below.

Example usage: (Note that in this example, we started with TEST_NAME_3)

bash-4.2$ ./CSV_interpreter.out TEST.csv
Please enter integer k for row 1's index: 3
Parameter set 3
3 3
Command: ./batchGenerator.out -p batch -hours 24 -cores 12 -test TEST_NAME_3 -par -WR
0.7 -par -CK 1 -par -div 3 -par -TC 3 -flag OOP_off
Submitted batch job 539277
Parameter set 4
2 4
Command: ./batchGenerator.out -p batch -hours 24 -cores 12 -test TEST_NAME_4 -par -WR
0.7 -par -CK 1 -par -div 2 -par -TC 4 -flag OOP_off
Submitted batch job 539278


====================================================
====================================================
===	batchmaker.cpp / batchGenerator.out ========
====================================================
====================================================
Compile with: g++ batchmaker.cpp -o batchGenerator.out
run with: ./batchGenerator.out -batch_flags -par -parameter_flag -parameter_value -flag <flag>

IN: Flag values:
mandatory:
-p <partition>  //e.g. batch,short, etc.
-hours <int>  //Two digit. Mandatory unless minutes are given.
-cores <int>  //CPUs per task
-test <str> //Name


optional: 
-mem <int> (memory in gigabytes per node. Defaults to 2.)
-mins <int> (Number of minutes.  Can replace hours)
-nodes <int> (Number of nodes.  Defaults to 1.)
-bigdata //Sends output to /bigdata/wchenlab/shared/Plant_SCE_output/, local otherwise

OUT: sbatch script entitled AUTO_BATCH.sh

Example: ./batchGenerator.out -p batch -hours 24
-cores 12 -test TEST_NAME_4 -par -WR 0.7 -par -CK 1 -par -div 2 -par -TC 4 -flag OOP_off

Example output: 
#!/bin/bash -l
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=12
#SBATCH --mem-per-cpu=2G
#SBATCH --time=0-24:00:00
#SBATCH --output=myTEST_NAME_4.stdout
#SBATCH --job-name="TEST_NAME_4"
#SBATCH -p batch 
export OMP_NUM_THREADS 12
mkdir Animate_Cyt_TEST_NAME_4
mkdir Nematic_test_1
mkdir Locations_test_1
mkdir Animate_No_Cyt_TEST_NAME_4
./program Animate_Cyt_TEST_NAME_4 Locations_test_TEST_NAME_4 Nematic_test_TEST_NAME_4 Animate_No_Cyt_TEST_NAME_4 -WR 0.7 -CK 1 -div 2 -TC 4

====================================================
====================================================
===	main.cpp / makefile / program.out===========
====================================================
====================================================
compile with: make all (Given that you have the makefile)
run with: sbatch <SBATCH_SCRIPT.sh>

IN: Folder names (Formatted in batch script), parameter flags.
Parameters:
-WR <double> 
	This value, defaulting to 1, will contract the WUS 
	distribution within the simulation by a factor of -WR.
-CKR <double> 
	This value, defaulting to 1, will contract the CK 
	distribution within the simulation by a factor of -CKR.
-div <int>
	This signifies a choice of division plane mechanism.
	1: Errera's rule
	2: Chemical Division
	3: Tensile Stress division
-TC <int> 
	Tensile stress calculation variations. 
	1: Projection before calculating force, adhesion included (hitherto used)
	2: Projection before calculating force, adhesion excluded
	3: Projection after calculating force, adhesion included
	4: Projection after calculating force, adhesion excluded

Example: sbatch AUTO_BATCH.sh (If this was generated by the above files.)
